// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateGameData, CreateGameErrors, CreateGameResponses, GetApiEndpointSummaryData, GetApiEndpointSummaryResponses, GetHealthCheckData, GetHealthCheckResponses, ReadGameByIdData, ReadGameByIdErrors, ReadGameByIdResponses, ReadGamesData, ReadGamesResponses, ReadRootData, ReadRootResponses, ScoreHandData, ScoreHandErrors, ScoreHandResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Score Hand Endpoint
 */
export const scoreHand = <ThrowOnError extends boolean = false>(options: Options<ScoreHandData, ThrowOnError>) => {
    return (options.client ?? client).post<ScoreHandResponses, ScoreHandErrors, ThrowOnError>({
        responseType: 'json',
        url: '/hands/score',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Games
 * Retrieve all games.
 */
export const readGames = <ThrowOnError extends boolean = false>(options?: Options<ReadGamesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadGamesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/games/',
        ...options
    });
};

/**
 * Create Game
 * Creates and returns a game.
 */
export const createGame = <ThrowOnError extends boolean = false>(options: Options<CreateGameData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateGameResponses, CreateGameErrors, ThrowOnError>({
        responseType: 'json',
        url: '/games/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Game By Id
 * Retrieve a single game by its ID.
 */
export const readGameById = <ThrowOnError extends boolean = false>(options: Options<ReadGameByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadGameByIdResponses, ReadGameByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/games/{game_id}',
        ...options
    });
};

/**
 * Read Root
 */
export const readRoot = <ThrowOnError extends boolean = false>(options?: Options<ReadRootData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadRootResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Healthz
 * Checks API health
 */
export const getHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<GetHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHealthCheckResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/healthz',
        ...options
    });
};

/**
 * Read Api
 */
export const getApiEndpointSummary = <ThrowOnError extends boolean = false>(options?: Options<GetApiEndpointSummaryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEndpointSummaryResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api',
        ...options
    });
};
