// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'https://mahjong-api.onrender.com' | (string & {});
};

/**
 * DragonValue
 */
export type DragonValue = 'red' | 'green' | 'white';

/**
 * GameCreateSchema
 */
export type GameCreateSchema = {
    [key: string]: unknown;
};

/**
 * GameDetailSchema
 */
export type GameDetailSchema = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Hands
     */
    hands: Array<HandOutSchema>;
};

/**
 * GameOutSchema
 */
export type GameOutSchema = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * HandCreateSchema
 */
export type HandCreateSchema = {
    /**
     * Melds
     */
    melds: Array<MeldSchemaInput>;
    pair: TileSchema;
};

/**
 * HandOutSchema
 */
export type HandOutSchema = {
    /**
     * Melds
     */
    melds: Array<MeldSchemaOutput>;
    pair: TileSchema;
    /**
     * Id
     */
    id: number;
    /**
     * Game Id
     */
    game_id: number;
    /**
     * Created At
     */
    created_at?: string | null;
};

/**
 * HandScoreExplanation
 */
export type HandScoreExplanation = {
    /**
     * Score
     */
    score: number;
    /**
     * Explanation
     */
    explanation: Array<RuleExplanation>;
};

/**
 * MeldSchema
 */
export type MeldSchemaInput = {
    type: MeldType;
    tile: TileSchema;
};

/**
 * MeldSchema
 */
export type MeldSchemaOutput = {
    type: MeldType;
    tile: TileSchema;
};

/**
 * MeldType
 */
export type MeldType = 'chow' | 'pong' | 'kong';

/**
 * NumberValue
 */
export type NumberValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

/**
 * RuleExplanation
 */
export type RuleExplanation = {
    slug: RuleSlug;
    /**
     * Name
     */
    name: string;
    /**
     * Score
     */
    score: number;
    /**
     * Description
     */
    description: string;
};

/**
 * RuleSlug
 */
export type RuleSlug = 'no_flowers_and_no_seasons' | 'seat_flower' | 'seat_season' | 'all_chows' | 'dragon_pung' | 'seat_wind' | 'prevalent_wind' | 'self_drawn_win' | 'last_tile_draw' | 'last_tile_discard' | 'robbing_the_kong' | 'out_on_replacement' | 'all_flowers' | 'all_seasons' | 'all_pungs' | 'half_flush' | 'little_three_dragons' | 'seven_pairs' | 'full_flush' | 'four_concealed_pungs' | 'big_three_dragons' | 'little_four_winds' | 'big_four_winds' | 'all_honors' | 'all_terminals' | 'nine_gates' | 'thirteen_orphans' | 'all_kongs' | 'jade_dragon' | 'ruby_dragon' | 'pearl_dragon' | 'blessing_of_heaven' | 'blessing_of_earth';

/**
 * ScoringRule
 */
export type ScoringRule = {
    slug: RuleSlug;
    /**
     * Description
     */
    description: string;
    /**
     * Score Value
     */
    score_value: number;
    /**
     * Supersedes
     */
    supersedes?: Array<RuleSlug>;
};

/**
 * Suit
 */
export type Suit = 'circle' | 'bamboo' | 'character' | 'wind' | 'dragon';

/**
 * TileSchema
 */
export type TileSchema = {
    suit: Suit;
    /**
     * Value
     */
    value: NumberValue | WindValue | DragonValue;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * WindValue
 */
export type WindValue = 'east' | 'south' | 'west' | 'north';

export type ScoreHandData = {
    body: HandCreateSchema;
    path?: never;
    query?: never;
    url: '/hands/score';
};

export type ScoreHandErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ScoreHandError = ScoreHandErrors[keyof ScoreHandErrors];

export type ScoreHandResponses = {
    /**
     * Successful Response
     */
    200: HandScoreExplanation;
};

export type ScoreHandResponse = ScoreHandResponses[keyof ScoreHandResponses];

export type ReadHandsHandsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/hands/';
};

export type ReadHandsHandsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadGamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/games/';
};

export type ReadGamesResponses = {
    /**
     * Response Readgames
     * Successful Response
     */
    200: Array<GameOutSchema>;
};

export type ReadGamesResponse = ReadGamesResponses[keyof ReadGamesResponses];

export type CreateGameData = {
    body: GameCreateSchema;
    path?: never;
    query?: never;
    url: '/games/';
};

export type CreateGameErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateGameError = CreateGameErrors[keyof CreateGameErrors];

export type CreateGameResponses = {
    /**
     * Successful Response
     */
    200: GameOutSchema;
};

export type CreateGameResponse = CreateGameResponses[keyof CreateGameResponses];

export type ReadGameByIdData = {
    body?: never;
    path: {
        /**
         * Game Id
         */
        game_id: number;
    };
    query?: never;
    url: '/games/{game_id}';
};

export type ReadGameByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadGameByIdError = ReadGameByIdErrors[keyof ReadGameByIdErrors];

export type ReadGameByIdResponses = {
    /**
     * Successful Response
     */
    200: GameDetailSchema;
};

export type ReadGameByIdResponse = ReadGameByIdResponses[keyof ReadGameByIdResponses];

export type CreateGameHandData = {
    body: HandCreateSchema;
    path: {
        /**
         * Game Id
         */
        game_id: number;
    };
    query?: never;
    url: '/games/{game_id}/hands';
};

export type CreateGameHandErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateGameHandError = CreateGameHandErrors[keyof CreateGameHandErrors];

export type CreateGameHandResponses = {
    /**
     * Successful Response
     */
    200: HandOutSchema;
};

export type CreateGameHandResponse = CreateGameHandResponses[keyof CreateGameHandResponses];

export type ReadScoringRulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/score/rules';
};

export type ReadScoringRulesResponses = {
    /**
     * Response Read Scoring Rules
     * Successful Response
     */
    200: {
        [key in RuleSlug]?: ScoringRule;
    };
};

export type ReadScoringRulesResponse = ReadScoringRulesResponses[keyof ReadScoringRulesResponses];

export type ReadRootData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/healthz';
};

export type GetHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetApiEndpointSummaryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api';
};

export type GetApiEndpointSummaryResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
